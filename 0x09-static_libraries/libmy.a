#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
#include "main.h"
/**
*_islower - Checks for lowercase character
*@c: Character to be checked
*Return: 1 if character is lowercase, 0 otherwise
*/
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	return (1);
	else
	return (0);
}
#include "main.h"
/**
*_isalpha - Checks for alpabetic character
*@c: Checks for alphabets character
*
*Return: 1 if c is a letter, 0 otherwise
*/
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') ||
	(c >= 'A' && c <= 'Z'))
	return (1);
	else
	return (0);
}
#include "main.h"
/**
*_abs - Computes absolute value of an integer
*@n: The integer to be computed
*
*Return: The absolute value of an integer
*/
int _abs(int n)
{
	if (n >= 0)
	return (n);
	else
	return (-n);
}
#include "main.h"
/**
*_isupper - Checks for uppercase character
*@c: Is thecharacter to be checked
*Return: 1 if c is uppercase, 0 otherwise
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	return (1);
	else

	return (0);
}
#include "main.h"
/**
*_isdigit - Checks for a digit
*@c: The digit to be checked
*
*Return: 1 if c is a digit, 0 otherwise
*/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	return (1);
	else
	return (0);
}
#include "main.h"
/**
* _strlen - returns the length of a string
* @s: is the pointer to the length of string
* Return: length of @s
*/
int _strlen(char *s)
{
	int length = 0;

	while
	(*s++)

	length++;

	return (length);
}
#include "main.h"
/**
* _puts - prints a string followed by a newline
* @str: pointer to the string
*/
void _puts(char *str)
{

	puts(str);
}
#include "main.h"
/**
* char *_strcpy - copies the string
* @src: source
* @dest: destiny
* Return: dest
*/
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = src[i];

	return (dest);
}
#include "main.h"
/**
* *_strcat - appends the src string to the dest string
* @src: the source string
* @dest: the destination string
*
* Return: a pointerto the resulting string dest
*/
char *_strcat(char *dest, char *src)
{
	int destl = 0;
	int i;

	while (dest[destl])
	{
		destl++;
	}
	for (i = 0; src[i] != 0; i++)
	{
		dest[destl] = src[i];
		destl++;
	}
	dest[destl] = '\0';
	return (dest);
}
#include "main.h"
/**
* *_strncat - concatenates two string
* @src: source value
* @dest: destination value
* @n: the number of bytes determining null termination
*
* Return: a pointer to the resulting string dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int destl = 0;
	int i = 0;

	while (dest[destl])
	{
		destl++;
	}
	while (i < n && src[i])
	{
		dest[destl] = src[i];
		destl++;
		i++;
	}
	dest[destl + n + 1] = '\0';
	return (dest);
}
#include "main.h"
/**
* *_strncpy - copies a string
* @src: te source value
* @dest: destination value
* @n: the limit for the copy
*
* Return: a pointer dest
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;


	while (src[j])
	{
		j++;
	}
	while (i < n && src[i])
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
#include "main.h"
/**
* _strcmp - compares two strings
* @s1: a first pointer
* @s2: a second pointer
*
* Return: 0
*/
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}
#include "main.h"
/**
*_memset - function that fills n bytes of memory area
*
* @s: pointer to the memory area
* @b: the value
* @n: the number of bytes
*
* Return: a pointer to memory area
*/
char *_memset(char *s, char b, unsigned int n)

{
	unsigned int i;

	i = 0;

	for (i = 0; i < n; i++)
		*(s + i) = b;


	return (s);
}
#include "main.h"
/**
*_memcpy - copies ytes from memory area src to memory area dest
*@dest: destination area memory area
*@src: source memory area
*@n: data
*Return: dest
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}
#include "main.h"
/**
*_strchr - locates a character in a string
*@s: string
*@c: character
*
*Return: the string from character found
*/
char *_strchr(char *s, char c)
{
	int i = 0;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}
	return ('\0');
}
#include "main.h"
/**
*_strspn - search a string for a set of bytes
*@s: source string
*@accept: accepted string
*
*Return: number of bytes in the init
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int b = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{

				b++;
				break;
		}

		else if (accept[i + 1] == '\0')
			return (b);
	}
	s++;
	}
	return (b);
}
#include "main.h"
/**
*_strpbrk - locates the first occurrence in string
*		s of any of the bytes in string accept
*@s: string
*@accept: set of bytes to be searched for
*
*Return: pointer to matched byte
*/
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
			}
			s++;
	}
	return ('\0');
}
#include "main.h"
/**
*_strstr - locates a substring
*@haystack: string
*@needle: substring
*
*Return: pointer to the beginning of located substring
*	null if substring is not found
*/
char *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		i = 0;

		if (haystack[i] == needle[i])
		{
			do {
				if (needle[i + 1] == '\0')
					return (haystack);
				i++;
			} while (haystack[i] == needle[i]);
		}
		haystack++;
	}
	return ('\0');
}

